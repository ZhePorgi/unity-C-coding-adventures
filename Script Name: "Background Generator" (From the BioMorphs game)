using UnityEngine;

public class BackgroundGenerator : MonoBehaviour
{
    public Material accentMaterial;
    public float accentThreshold = 1.0f;
    public float waveFrequency = 0.1f;
    public float waveAmplitude = 0.5f;
    public Slider accentThresholdSlider; // Additional feature for dynamic adjustment

    private Mesh mesh;
    private Vector3[] vertices;
    private Color[] colors;

    void Start()
    {
        mesh = GetComponent<MeshFilter>().mesh;
        vertices = mesh.vertices;
        colors = new Color[vertices.Length];

        GenerateBackground(); // Line: "background design script where it in script generates a plane that faces on it's side and there are flowing ripples in the polygons"
        
        accentThresholdSlider.onValueChanged.AddListener(UpdateAccentThreshold); // Dynamic adjustment
    }

    void GenerateBackground()
    {
        for (int i = 0; i < vertices.Length; i++)
        {
            vertices[i].y += Mathf.Sin(vertices[i].x * waveFrequency) * waveAmplitude; // Line: "there are flowing ripples in the polygons"
        }

        ApplyAccentColors(); // Line: "any polygons that are above or extend past a certain length on the background create a radius around the polygon"
        mesh.vertices = vertices;
        mesh.colors = colors;
        mesh.RecalculateNormals();
    }

    void ApplyAccentColors()
    {
        for (int i = 0; i < vertices.Length; i++)
        {
            if (vertices[i].y > accentThreshold)
            {
                colors[i] = accentMaterial.color; // Line: "that polygon becomes the accent colour along with any other polygons that touch/intersect with the sphere cast bubble"
            }
            else
            {
                colors[i] = Color.white;
            }
        }
    }

    void UpdateAccentThreshold(float value)
    {
        accentThreshold = value; // Update threshold dynamically
        ApplyAccentColors();
        mesh.colors = colors; // Update mesh colors
    }
}
